@page "/customer"

@using Application.Common.Models
@using Application.Customers.Queries.GetCustomersWithPagination

@inject HttpClient _http

<h1>Weather customer</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (_customers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="col-md-6">
        <a href='/customer/add' class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i>
            Add Customer
        </a>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Firstname</th>
                <th>Lastname</th>
                <th>Email</th>
                <th>PhoneNumber</th>
                <th>DateOfBirth</th>
            </tr>
        </thead>
        <tbody>
            @foreach (CustomerMinDto customer in _customers)
            {
                <tr>
                    @*<td>@forecast.Id.ToString()</td>*@
                    <td>@customer.Firstname</td>
                    <td>@customer.Lastname</td>
                    <td>@customer.Email</td>
                    <td>@customer.PhoneNumber</td>
                    <td>@customer.DateOfBirth.ToShortDateString()</td>
                    <td>
                        <a href='/customer/edit/@customer.Id' class="btn btn-outline-dark" role="button">
                            Edit
                        </a>
                        <a href='/customer/delete/@customer.Id' class="btn btn-outline-danger" role="button">
                            Delete
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<CustomerMinDto> _customers;
    protected CustomerMinDto customerForDelete = new();

    protected override async Task OnInitializedAsync()
    {
        _customers = await _http.GetFromJsonAsync<List<CustomerMinDto>>("api/customers");
    }

    protected void DeleteConfirm(int id)
    {
        customerForDelete = _customers.FirstOrDefault(x => x.Id == id);
    }

}

@*@code {
    protected List<User> userList = new();
    protected List<User> searchUserData = new();
    
    protected string SearchString { get; set; } = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        await GetUser();
    }
    protected async Task GetUser()
    {
        userList = await Http.GetFromJsonAsync<List<User>>("api/User");
        searchUserData = userList;
    }
    protected void FilterUser()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            userList = searchUserData
                .Where(x => x.Username.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
                .ToList();
        }
        else
        {
            userList = searchUserData;
        }
    }
    
    public void ResetSearch()
    {
        SearchString = string.Empty;
        userList = searchUserData;
    }
}*@